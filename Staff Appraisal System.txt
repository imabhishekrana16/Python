import matplotlib.pyplot as plt
from reportlab.lib.units import inch
from reportlab.lib import colors
from reportlab.lib.pagesizes import letter, landscape
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet
import csv
import numpy as np
import seaborn as sns

class Employee:
    def __init__(self, emp_id, name, salary=0):
        self.emp_id = emp_id
        self.name = name
        self.scores = {
            'goals': [],
            'objectives': [],
            'responsibilities': [],
            'work_quality': [],
            'productivity': [],
            'attitude': []
        }
        self.salary = salary  # New attribute: salary

    def add_score(self, category, score):
        self.scores[category].append(score)

    def calculate_average_score(self, category):
        if not self.scores[category]:
            return 0
        return sum(self.scores[category]) / len(self.scores[category])

class StaffAppraisalSystem:
    def __init__(self):
        self.employees = []

    def plot_performance_pie_chart(self, emp_id):
        employee = next((emp for emp in self.employees if emp.emp_id == emp_id), None)
        if employee:
            categories = ['goals', 'objectives', 'responsibilities', 'work_quality', 'productivity', 'attitude']
            scores = [employee.calculate_average_score(category) for category in categories]
            
            # Create a pie chart with labels for each category
            plt.figure(figsize=(8, 8))
            plt.pie(scores, labels=categories, autopct='%1.1f%%', startangle=140)
            plt.title(f'Appraisal Scores Distribution for {employee.name}')
            plt.show()
        else:
            print("Employee not found!")
           

    def add_employee(self, emp_id, name, salary=0):
        if any(emp.emp_id == emp_id for emp in self.employees):
            print(f"Employee with ID {emp_id} already exists. Employee IDs must be unique.")
        else:
            employee = Employee(emp_id, name, salary)
            self.employees.append(employee)

    def conduct_appraisal(self, emp_id, category, score):
        employee = next((emp for emp in self.employees if emp.emp_id == emp_id), None)
        if employee:
            employee.add_score(category, score)
        else:
            print("Employee not found!")

    def generate_performance_report(self, pdf_filename):
        doc = SimpleDocTemplate(pdf_filename, pagesize=landscape(letter))
        story = []

        categories = ['goals', 'objectives', 'responsibilities', 'work_quality', 'productivity', 'attitude']

        data = [['Employee ID', 'Name', 'Salary'] + categories + ['Average Score']]

        max_avg_score = -1  # Initialize with a low value
        max_avg_score_employee = None

        for employee in self.employees:
            scores = [employee.calculate_average_score(category) for category in categories]
            average_score = sum(scores) / len(scores)
            data.append([employee.emp_id, employee.name, employee.salary] + scores + [f'{average_score:.2f}'])

            # Update the max average score and employee
            if average_score > max_avg_score:
                max_avg_score = average_score
                max_avg_score_employee = employee

        # Calculate bonus for the employee with the highest average score
        if max_avg_score_employee:
            bonus = max_avg_score_employee.salary * 0.10
            max_avg_score_employee.salary += bonus

        table = Table(data, colWidths=[1.5 * inch] * (len(categories) + 4))
        table.setStyle(TableStyle([('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                                   ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                                   ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                                   ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                                   ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                                   ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                                   ('GRID', (0, 0), (-1, -1), 1, colors.black)]))

        story.append(table)
        doc.build(story)

    def plot_performance_graph(self, category, records_per_page=50):
        employee_names = [employee.name for employee in self.employees]
        average_scores = [employee.calculate_average_score(category) for employee in self.employees]

        # Split the data into multiple pages
        num_records = len(employee_names)
        num_pages = (num_records + records_per_page - 1) // records_per_page

        for page in range(num_pages):
            start_idx = page * records_per_page
            end_idx = (page + 1) * records_per_page
            page_employee_names = employee_names[start_idx:end_idx]
            page_average_scores = average_scores[start_idx:end_idx]
            c=np.array(["blue","green","red","yellow","black","green"])
            plt.figure(figsize=(10, 6))
            plt.barh(page_employee_names, page_average_scores, color=c)
            plt.xlabel('Average Score')
            plt.ylabel('Employee Names')
            plt.title(f'Employee Performance in {category.capitalize()} (Page {page + 1}/{num_pages})')

            plt.tight_layout()
            plt.show()

    def import_data_from_csv(self, csv_filename):
        categories = ['goals', 'objectives', 'responsibilities', 'work_quality', 'productivity', 'attitude']
        new_employees = []

        try:
            with open(csv_filename, 'r') as csv_file:
                csv_reader = csv.DictReader(csv_file)
                for row in csv_reader:
                    emp_id = row['Employee ID']
                    name = row.get('Name', 'Name Missing')
                    salary = float(row.get('Salary', 0))  # Provide a default salary if missing

                    existing_employee = next((emp for emp in self.employees if emp.emp_id == emp_id), None)

                    if existing_employee:
                        print(f"Employee with ID {emp_id} already exists. Updating information.")
                        for category in categories:
                            if category in row:
                                score = float(row[category])
                                existing_employee.add_score(category, score)
                            else:
                                print(f"Missing data for category {category} for Employee ID {emp_id}. Please re-enter.")
                                return
                    else:
                        employee = Employee(emp_id, name, salary)
                        for category in categories:
                            if category in row:
                                score = float(row[category])
                                employee.add_score(category, score)
                            else:
                                print(f"Missing data for category {category} for Employee ID {emp_id}. Please re-enter.")
                                return
                        new_employees.append(employee)

                self.employees.extend(new_employees)
                print(f'Data imported from {csv_filename}')
        except FileNotFoundError:
            print(f'File not found: {csv_filename}')
        except Exception as e:
            print(f'Error importing data from {csv_filename}: {str(e)}')

    def export_data_to_csv(self, csv_filename):
        try:
            with open(csv_filename, 'w', newline='') as csv_file:
                fieldnames = ['Employee ID', 'Name', 'Salary'] + categories
                writer = csv.DictWriter(csv_file, fieldnames=fieldnames)
                writer.writeheader()
                for employee in self.employees:
                    row = {'Employee ID': employee.emp_id, 'Name': employee.name, 'Salary': employee.salary}
                    for category in categories:
                        row[category] = employee.calculate_average_score(category)
                    writer.writerow(row)
                print(f'Data exported to {csv_filename}')
        except Exception as e:
            print(f'Error exporting data to {csv_filename}: {str(e)}')

    def add_employee_from_input(self):
        emp_id = input("Enter Employee ID: ")
        name = input("Enter Employee Name: ")
        salary = float(input("Enter Employee Salary: "))
        self.add_employee(emp_id, name, salary)

    def delete_employee(self, emp_id):
        employee = next((emp for emp in self.employees if emp.emp_id == emp_id), None)
        if employee:
            self.employees.remove(employee)
            print(f'Employee with ID {emp_id} deleted.')
        else:
            print("Employee not found!")

    def save_data_to_csv(self, csv_filename):
        try:
            with open(csv_filename, 'w', newline='') as csv_file:
                fieldnames = ['Employee ID', 'Name', 'Salary'] + categories
                writer = csv.DictWriter(csv_file, fieldnames=fieldnames)
                writer.writeheader()
                for employee in self.employees:
                    row = {'Employee ID': employee.emp_id, 'Name': employee.name, 'Salary': employee.salary}
                    for category in categories:
                        row[category] = employee.calculate_average_score(category)
                    writer.writerow(row)
                print(f'Data saved to {csv_filename}')
        except Exception as e:
            print(f'Error saving data to {csv_filename}: {str(e)}')

    def view_csv_data(self, csv_filename, categories):
        try:
            with open(csv_filename, 'r') as csv_file:
                csv_reader = csv.DictReader(csv_file)
                for row in csv_reader:
                    data = ', '.join([f'{category}: {row[category]}' for category in categories])
                    print(f"Employee ID: {row['Employee ID']}, Name: {row['Name']}, Salary: {row['Salary']}, {data}")
                    print()
            print()
        except FileNotFoundError:
            print(f'File not found: {csv_filename}')
        except Exception as e:
            print(f'Error viewing data from {csv_filename}: {str(e)}')
    def plot_performance_scatter(self, category_x, category_y):
        valid_categories = set(categories)

        if category_x not in valid_categories or category_y not in valid_categories:
            print("Invalid categories. Please enter valid categories.")
            

        x_values = [employee.calculate_average_score(category_x) for employee in self.employees]
        y_values = [employee.calculate_average_score(category_y) for employee in self.employees]

        plt.figure(figsize=(8, 6))
        plt.scatter(x_values, y_values, c='b', marker='o')
        plt.xlabel(f'Average Score in {category_x}')
        plt.ylabel(f'Average Score in {category_y}')
        plt.title(f'Scatter Plot: {category_x.capitalize()} vs. {category_y.capitalize()}')
        plt.show()

    def plot_performance_histogram(self, category):
        scores = [employee.calculate_average_score(category) for employee in self.employees]
        
        plt.figure(figsize=(10, 6))
        plt.hist(scores, bins=10, color='blue', edgecolor='black')
        plt.xlabel(f'Average Score in {category.capitalize()}')
        plt.ylabel('Number of Employees')
        plt.title(f'Employee Performance Histogram for {category.capitalize()}')
        plt.show()

    def plot_heatmap(self):
        categories = ['goals', 'objectives', 'responsibilities', 'work_quality', 'productivity', 'attitude']
        data = [[employee.calculate_average_score(category) for category in categories] for employee in self.employees]

        # Create a heatmap using matplotlib
        fig, ax = plt.subplots(figsize=(10, 6))
        im = ax.imshow(data, cmap='coolwarm')

        # Show all ticks and labels
        ax.set_xticks(np.arange(len(categories)))
        ax.set_yticks(np.arange(len(self.employees)))
        ax.set_xticklabels(categories)
        ax.set_yticklabels([employee.name for employee in self.employees])

        # Rotate the tick labels and set their alignment
        plt.setp(ax.get_xticklabels(), rotation=45, ha="right", rotation_mode="anchor")

        # Create colorbar
        cbar = ax.figure.colorbar(im, ax=ax, cmap='coolwarm')
        cbar.ax.set_ylabel('Average Score', rotation=-90, va="bottom")

        # Display the heatmap
        plt.title('Average Appraisal Scores Heatmap')
        plt.tight_layout()
        plt.show()


        


def main():
    appraisal_system = StaffAppraisalSystem()
    categories = ['goals', 'objectives', 'responsibilities', 'work_quality', 'productivity', 'attitude']

    while True:
        print("\nStaff Appraisal System Menu:")
        print("1. Add Employee")
        print("2. Conduct Appraisal")
        print("3. Generate Performance Report (PDF)")
        print("4. Plot Performance Graph")
        print("5. Import Data from CSV")
        print("6. Export Data to CSV")
        print("7. Delete Employee")
        print("8. Save Data to CSV")
        print("9. View CSV Data")
        print("10. Plot Pie chart")
        print("11. Plot Histogram ")
        print("12. Quit")

        choice = input("Enter your choice: ")

        if choice == "1":
            appraisal_system.add_employee_from_input()
        elif choice == "2":
            emp_id = input("Enter Employee ID: ")
            category = input("Enter Category (goals/objectives/responsibilities/work_quality/productivity/attitude): ").lower()
            if category in categories:
                score = float(input("Enter Appraisal Score: "))
                appraisal_system.conduct_appraisal(emp_id, category, score)
            else:
                print("Invalid category. Please try again.")
        elif choice == "3":
            pdf_filename = input("Enter PDF filename (e.g., report.pdf): ")
            appraisal_system.generate_performance_report(pdf_filename)
            print(f"Performance report saved as '{pdf_filename}'")
        elif choice == "4":
            category = input("Enter Category to plot (goals/objectives/responsibilities/work_quality/productivity/attitude): ").lower()
            if category in categories:
                appraisal_system.plot_performance_graph(category)
            else:
                print("Invalid category. Please try again.")
        elif choice == "5":
            csv_filename = input("Enter CSV filename to import: ")
            appraisal_system.import_data_from_csv(csv_filename)
        elif choice == "6":
            csv_filename = input("Enter CSV filename to export: ")
            appraisal_system.export_data_to_csv(csv_filename)
        elif choice == "7":
            emp_id = input("Enter Employee ID to delete: ")
            appraisal_system.delete_employee(emp_id)
        elif choice == "8":
            csv_filename = input("Enter CSV filename to save: ")
            appraisal_system.save_data_to_csv(csv_filename)
        elif choice == "9":
            csv_filename = input("Enter CSV filename to view: ")
            appraisal_system.view_csv_data(csv_filename, categories)
        elif choice == "10":
            emp_id = input("Enter Employee ID to plot a pie chart: ")
            appraisal_system.plot_performance_pie_chart(emp_id)  # Option to plot pie chart
        elif choice == "11":
            category = input("Enter Category to plot a histogram: (goals/objectives/responsibilities/work_quality/productivity/attitude):").lower()
            if category in categories:
                appraisal_system.plot_performance_histogram(category)  # Option to plot histogram
            else:
                print("Invalid category. Please try again.")
        elif choice == "12":
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()